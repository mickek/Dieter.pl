diff --git a/libs/django/core/servers/basehttp.py b/libs/django/core/servers/basehttp.py
index f7c0a77..5b32ee2 100644
--- a/libs/django/core/servers/basehttp.py
+++ b/libs/django/core/servers/basehttp.py
@@ -11,6 +11,7 @@ from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
 import mimetypes
 import os
 import re
+import socket
 import stat
 import sys
 import urllib
@@ -690,6 +691,24 @@ class AdminMediaHandler(object):
                     fp.close()
         start_response(status, headers.items())
         return output
+    
+class StoppableWSGIServer(WSGIServer):
+    """WSGIServer with short timeout, so that server thread can stop this server."""
+
+    def server_bind(self):
+        """Sets timeout to 1 second."""
+        WSGIServer.server_bind(self)
+        self.socket.settimeout(1)
+
+    def get_request(self):
+        """Checks for timeout when getting request."""
+        try:
+            sock, address = self.socket.accept()
+            sock.settimeout(None)
+            return (sock, address)
+        except socket.timeout:
+            raise
+
 
 def run(addr, port, wsgi_handler):
     server_address = (addr, port)
diff --git a/libs/django/test/testcases.py b/libs/django/test/testcases.py
index 8c73c63..d0e816d 100644
--- a/libs/django/test/testcases.py
+++ b/libs/django/test/testcases.py
@@ -1,5 +1,7 @@
 import re
 import unittest
+import socket
+import threading
 from urlparse import urlsplit, urlunsplit
 from xml.dom.minidom import parseString, Node
 
@@ -13,6 +15,8 @@ from django.test import _doctest as doctest
 from django.test.client import Client
 from django.utils import simplejson
 from django.utils.encoding import smart_str
+from django.core.handlers.wsgi import WSGIHandler
+from django.core.servers import basehttp
 
 normalize_long_ints = lambda s: re.sub(r'(?<![\w])(\d+)L(?![\w])', '\\1', s)
 normalize_decimals = lambda s: re.sub(r"Decimal\('(\d+(\.\d*)?)'\)", lambda m: "Decimal(\"%s\")" % m.groups()[0], s)
@@ -202,6 +206,52 @@ class DocTestRunner(doctest.DocTestRunner):
         # Rollback, in case of database errors. Otherwise they'd have
         # side effects on other tests.
         transaction.rollback_unless_managed()
+        
+class TestServerThread(threading.Thread):
+    """Thread for running a http server while tests are running."""
+
+    def __init__(self, address, port):
+        self.address = address
+        self.port = port
+        self._stopevent = threading.Event()
+        self.started = threading.Event()
+        self.error = None
+        super(TestServerThread, self).__init__()
+
+    def run(self):
+        """Sets up test server and database and loops over handling http requests."""
+        try:
+            handler = basehttp.AdminMediaHandler(WSGIHandler())
+            server_address = (self.address, self.port)
+            httpd = basehttp.StoppableWSGIServer(server_address, basehttp.WSGIRequestHandler)
+            httpd.set_app(handler)
+            self.started.set()
+        except basehttp.WSGIServerException, e:
+            self.error = e
+            self.started.set()
+            return
+
+        # Must do database stuff in this new thread if database in memory.
+        from django.conf import settings
+        if settings.DATABASE_ENGINE == 'sqlite3' \
+            and (not settings.TEST_DATABASE_NAME or settings.TEST_DATABASE_NAME == ':memory:'):
+            from django.db import connection
+            db_name = connection.creation.create_test_db(0)
+            # Import the fixture data into the test database.
+            if hasattr(self, 'fixtures'):
+                # We have to use this slightly awkward syntax due to the fact
+                # that we're using *args and **kwargs together.
+                call_command('loaddata', *self.fixtures, **{'verbosity': 0})
+
+        # Loop until we get a stop event.
+        while not self._stopevent.isSet():
+            httpd.handle_request()
+
+    def join(self, timeout=None):
+        """Stop the thread and wait for it to finish."""
+        self._stopevent.set()
+        threading.Thread.join(self, timeout)
+
 
 class TransactionTestCase(unittest.TestCase):
     def _pre_setup(self):
@@ -230,6 +280,19 @@ class TransactionTestCase(unittest.TestCase):
             self._old_root_urlconf = settings.ROOT_URLCONF
             settings.ROOT_URLCONF = self.urls
             clear_url_caches()
+            
+    def start_test_server(self, address='localhost', port=8000):
+        """Creates a live test server object (instance of WSGIServer)."""
+        self.server_thread = TestServerThread(address, port)
+        self.server_thread.start()
+        self.server_thread.started.wait()
+        if self.server_thread.error:
+            raise self.server_thread.error
+
+    def stop_test_server(self):
+        if self.server_thread:
+            self.server_thread.join()
+
 
     def __call__(self, result=None):
         """
